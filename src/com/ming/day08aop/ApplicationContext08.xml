<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
							http://www.springframework.org/schema/beans/spring-beans.xsd 
							http://www.springframework.org/schema/context 
							http://www.springframework.org/schema/context/spring-context-4.3.xsd 
							http://www.springframework.org/schema/aop 
							http://www.springframework.org/schema/aop/spring-aop-4.3.xsd ">
	<context:component-scan base-package="com.ming.day08aop"></context:component-scan>
	<!--准备工作:导入aop(约束)命名空间 -->
	<!--1.配置目标对象 -->
	<bean name="userService" class="com.ming.day08aop.UserServiceImpl"></bean>
	<bean name="userServiceCglib" class="com.ming.day08aop.Day08UserServiceImpl02" ></bean>
	<!-- 2,配置通知对象 -->
	<bean name="myAdvice" class="com.ming.day08aop.MyAdvice08"></bean>
	<!--3.配置将通知织入目标对象 -->
	<aop:config>
		<!-- 配置切入点 固定格式:execution(public void 完整方法名) 完整方法名是指 包名+类名+方法 如: execution(public 
			void com.ming.day08aop.UserServiceImpl.save()) 注意: 一般格式: public void com.ming.day08aop.UserServiceImpl.save() 
			void com.ming.day08aop.UserServiceImpl.save() //一般默认public权限， * com.ming.day08aop.UserServiceImpl.save()用通佩服*表示返回值， 
			* com.ming.day08aop.UserServiceImpl.*() 用*表示一个类的所有的方法 * com.ming.day08aop.UserServiceImpl.*(..) 
			用..表示所有的参数 * com.ming.day08aop.*ServiceImpl.*(..) 用*表示dao08aop下的所有服务执行类 * 
			com.ming.day08aop..*ServiceImpl.*(..) 用*表示day08aop下所有的子包的所有以SericeImpl结尾的所有类 -->
		<aop:pointcut expression="execution(* com.ming.day08aop.UserServiceImpl.*(..))" id="pc" />
		<aop:pointcut expression="execution(* com.ming.day08aop.Day08UserServiceImpl02.*(..))" id="pcCglib"/>
		<!-- 通知配置通知类 -->
		<aop:aspect ref="myAdvice">
			<!--指定名为before的方法作为前置通知 -->
			<aop:before method="before" pointcut-ref="pc" />
			<!-- 指定名为afterReturning方法配置后置通知(出现异常不会调用) -->
			<aop:after-returning method="afterReturning" pointcut-ref="pc" />
			<!-- 指定名为around方法配置环绕通知 -->
			<aop:around method="around" pointcut-ref="pc" />
			<!-- 配置环绕通知 -->
			<aop:after-throwing method="afterException" pointcut-ref="pc" />
			<!-- 指定名为after方法配置后置通知(出现异常会运行) -->
			<aop:after method="after" pointcut-ref="pc" />
		</aop:aspect>
		<aop:aspect ref="myAdvice">
			<!--指定名为before的方法作为前置通知 -->
			<aop:before method="before" pointcut-ref="pcCglib" />
			<!-- 指定名为afterReturning方法配置后置通知(出现异常不会调用) -->
			<aop:after-returning method="afterReturning" pointcut-ref="pcCglib" />
			<!-- 指定名为around方法配置环绕通知 -->
			<aop:around method="around" pointcut-ref="pcCglib" />
			<!-- 配置环绕通知 -->
			<aop:after-throwing method="afterException" pointcut-ref="pcCglib" />
			<!-- 指定名为after方法配置后置通知(出现异常会运行) -->
			<aop:after method="after" pointcut-ref="pcCglib" />
		</aop:aspect>
	</aop:config>
</beans>